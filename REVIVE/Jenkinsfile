pipeline {
    agent any

    environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}

    stages {

        stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
 //    stage('Test microservice catalog') {
 //        agent {
 //            docker {
 //                image 'golang:1.20.1'
 //                args '-u 0:0'
 //            }
 //        }
 //        steps {
 //            sh '''
 //                cd $WORKSPACE/REVIVE/src/catalog/
 //                go test
 //            '''
 //        }
 //    }
 //    stage('Test microservice cart') {
 //        agent {
 //            docker {
 //                image 'maven:3.8.7-openjdk-18'
 //                args '-u 0:0'
 //            }
 //        }
 //        steps {
 //            sh '''
 //                cd $WORKSPACE/REVIVE/src/cart/
 //                mvn  test  -Dmaven.test.skip=true --quiet
 //            '''
 //        }
 //    }


 //    stage('Test microservice ui') {
 //        agent {
 //            docker {
 //                image 'maven:3.8.7-openjdk-18'
 //                args '-u 0:0'
 //            }
 //        }
 //        steps {
 //            sh '''
 //                cd $WORKSPACE/REVIVE/src/ui/
 //                mvn  test  -Dmaven.test.skip=true --quiet
 //            '''
 //        }
 //    }


 //    stage('Test microservice order') {
 //        agent {
 //            docker {
 //                image 'maven:3.8.7-openjdk-18'
 //                args '-u 0:0'
 //            }
 //        }
 //        steps {
 //            sh '''
 //                cd $WORKSPACE/REVIVE/src/orders/
 //                mvn  test  -Dmaven.test.skip=true --quiet
 //            '''
 //        }
 //    }

 //    stage('Test microservice checkout') {
 //        agent {
 //            docker {
 //                image 'node'
 //                args '-u 0:0'
 //            }
 //        }
 //        steps {
 //            sh '''
 //                cd $WORKSPACE/REVIVE/src/checkout/
 //                npm install
 //            '''
 //        }
 //    }
        



//      stage('SonarQube analysis') {
//                 agent {
//                     docker {
//                      image 'devopseasylearning/sonar-scanner-revive:v1.0.0'
//                    }
//                   }
//                   environment {
//            CI = 'true'
//            scannerHome='/opt/sonar-scanner'
//        }
//                steps{
//                    withSonarQubeEnv('sonar') {
//                        sh "${scannerHome}/bin/sonar-scanner"
//                    }
//                }
//            }
//        stage("Quality Gate") {
//                steps {
//                  timeout(time: 1, unit: 'HOURS') {
//                    waitForQualityGate abortPipeline: true
//                  }
//                }
//              }

//          stage('Build microservice catalog') {
//            agent {
//                docker {
//                    image 'golang:1.20.1'
//                    args '-u 0:0'
//                }
//            }
//            steps {
//                sh '''
//                    cd $WORKSPACE/REVIVE/src/catalog/
//                    go build   -buildvcs=false
//                '''
//            }
//        }
//
//        stage('Build microservice cart') {
//            agent {
//                docker {
//                    image 'maven:3.8.7-openjdk-18'
//                    args '-u 0:0'
//                }
//            }
//            steps {
//                sh '''
//                    cd $WORKSPACE/REVIVE/src/cart/
//                   mvn  package -Dmaven.test.skip=true --quiet
//                '''
//            }
//        }
//
//
//        stage('Build microservice ui') {
//            agent {
//                docker {
//                    image 'maven:3.8.7-openjdk-18'
//                    args '-u 0:0'
//                }
//            }
//            steps {
//                sh '''
//                    cd $WORKSPACE/REVIVE/src/ui/
//                    mvn  package -Dmaven.test.skip=true --quiet
//                '''
//            }
//        }
//
//        stage('Build microservice order') {
//            agent {
//                docker {
//                    image 'maven:3.8.7-openjdk-18'
//                    args '-u 0:0'
//                }
//            }
//            steps {
//                sh '''
//                    cd $WORKSPACE/REVIVE/src/orders/
//                    mvn  package -Dmaven.test.skip=true --quiet
//                '''
//            }
//        }
//
//
//        stage('Build microservice checkout') {
//            agent {
//                docker {
//                    image 'node'
//                    args '-u 0:0'
//                }
//            }
//            steps {
//                sh '''
//                    cd $WORKSPACE/REVIVE/src/checkout/
//                    npm install
//                    npm run build
//                '''
//            }
//        }
//
//
       stage('Build-images-ui') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/ui/
           docker build -t  fridade/revive:ui-$BUILD_NUMBER .
               '''
           }
       }
       stage('Build-images-orders') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/orders/
           docker build -t  fridade/revive:orders-$BUILD_NUMBER .
           docker build -f Dockerfile-rabbitmq  -t fridade/revive:orders-rabbitmq-$BUILD_NUMBER .
           docker build -f Dockerfile-mysql  -t fridade/revive:orders-mysql-$BUILD_NUMBER .


               '''
           }
       }

       stage('Build-images-cart') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/cart/
           docker build -t  fridade/revive:cart-$BUILD_NUMBER .
           docker build -f Dockerfile-dynamodb -t fridade/revive:cart-dynamodb-$BUILD_NUMBER .
               '''
           }
       }


       stage('Build-images-assets') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/assets/
           docker build -t  fridade/revive:assets-$BUILD_NUMBER .
               '''
           }
       }


       stage('Build-images-catalog') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/catalog/
           docker build -t  fridade/revive:catalog-$BUILD_NUMBER .
           docker build -f Dockerfile-mysql -t fridade/revive:catalog-mysql-$BUILD_NUMBER .
               '''
           }
       }


       stage('Build-images-checkout') {
           steps {
               sh '''
           cd $WORKSPACE/REVIVE/src/checkout/
           docker build -t  fridade/revive:checkout-$BUILD_NUMBER .
           docker build -f Dockerfile-db -t fridade/revive:checkout-db-$BUILD_NUMBER .
               '''
           }
       }

       stage('Push-ui') {
          
            steps {
               sh 'docker push fridade/revive:ui-$BUILD_NUMBER'
            }
        }

      stage('Push-orders') {
        // Push-orders stage
            steps {
           
            sh '''
                docker push fridade/revive:orders-$BUILD_NUMBER
                docker push fridade/revive:orders-rabbitmq-$BUILD_NUMBER 
                docker push fridade/revive:orders-mysql-$BUILD_NUMBER
            '''
                }
        }

        stage('Push-cart') {
        // Push-orders stage
            steps {
           
            sh '''
                docker push fridade/revive:cart-$BUILD_NUMBER 
                docker push fridade/revive:cart-dynamodb-$BUILD_NUMBER 
                
            '''
                }
        }

        stage('Push-assets') {
          
            steps {
               sh 'docker push fridade/revive:assets-$BUILD_NUMBER'
            }
        }

        

    
    }



 }        

