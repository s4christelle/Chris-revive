pipeline {
    agent any
    stages {
        stage('Test microservice catalog') {
            agent {
                docker {
                    image 'golang:1.20.1'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd $WORKSPACE/REVIVE/src/catalog/
                    go test
                '''
            }
        }
        stage('Test microservice cart') {
            agent {
                docker {
                    image 'maven:3.8.7-openjdk-18'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd $WORKSPACE/REVIVE/src/cart/
                    mvn  test  -Dmaven.test.skip=true --quiet
                '''
            }
        }


        stage('Test microservice ui') {
            agent {
                docker {
                    image 'maven:3.8.7-openjdk-18'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd $WORKSPACE/REVIVE/src/ui/
                    mvn  test  -Dmaven.test.skip=true --quiet
                '''
            }
        }


        stage('Test microservice order') {
            agent {
                docker {
                    image 'maven:3.8.7-openjdk-18'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd $WORKSPACE/REVIVE/src/orders/
                    mvn  test  -Dmaven.test.skip=true --quiet
                '''
            }
        }

        stage('Test microservice checkout') {
            agent {
                docker {
                    image 'node'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd $WORKSPACE/REVIVE/src/checkout/
                    npm install
                '''
            }
        }



        stage('SonarQube analysis') {
                agent {
                    docker {
                      image 'devopseasylearning/sonar-scanner-revive:v1.0.0'
                    }
                   }
                   environment {
            CI = 'true'
            scannerHome='/opt/sonar-scanner'
        }
                steps{
                    withSonarQubeEnv('sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        stage("Quality Gate") {
                steps {
                  timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                  }
                }
              }




        
    }
}
